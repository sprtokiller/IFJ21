D:Token at [2, 1]: require
D:Token at [2, 9]: string literal
D: Val: "ifj21"
D:Token at [4, 1]: function
D:Token at [4, 10]: identifier
D: Val: main
D:Token at [4, 14]: left parenthese
D:Token at [4, 15]: right parenthese
D:Token at [5, 2]: local
D:Token at [5, 8]: identifier
D: Val: s1
D:Token at [5, 11]: colon
D:Token at [5, 13]: string
D:Token at [5, 20]: assignment
D: Val: =
D:Token at [5, 22]: string literal
D: Val: "Toto je nejaky text"
D:Token at [6, 2]: local
D:Token at [6, 8]: identifier
D: Val: s2
D:Token at [6, 11]: colon
D:Token at [6, 13]: string
D:Token at [6, 20]: assignment
D: Val: =
D:Token at [6, 22]: identifier
D: Val: s1
D:Token at [6, 25]: concatenate
D: Val: ..
D:Token at [6, 28]: string literal
D: Val: ", ktery jeste trochu obohatime"
D:Token at [7, 2]: identifier
D: Val: write
D:Token at [7, 7]: left parenthese
D:Token at [7, 8]: identifier
D: Val: s1
D:Token at [7, 10]: comma
D:Token at [7, 12]: string literal
D: Val: "\010"
D:Token at [7, 18]: comma
D:Token at [7, 20]: identifier
D: Val: s2
D:Token at [7, 22]: right parenthese
D:Token at [7, 23]: local
D:Token at [7, 29]: identifier
D: Val: s1len
D:Token at [7, 34]: colon
D:Token at [7, 35]: integer
D:Token at [7, 42]: assignment
D: Val: =
D:Token at [7, 43]: length
D:Token at [7, 44]: identifier
D: Val: s1
D:Token at [7, 47]: local
D:Token at [7, 53]: identifier
D: Val: s1len4
D:Token at [7, 59]: colon
D:Token at [7, 61]: integer
D:Token at [7, 68]: assignment
D: Val: =
D:Token at [7, 69]: identifier
D: Val: s1len
D:Token at [8, 2]: identifier
D: Val: s1len
D:Token at [8, 8]: assignment
D: Val: =
D:Token at [8, 10]: identifier
D: Val: s1len
D:Token at [8, 16]: subtract
D:Token at [8, 18]: integer literal
D: Val: 4
D:Token at [8, 20]: identifier
D: Val: s1
D:Token at [8, 23]: assignment
D: Val: =
D:Token at [8, 25]: identifier
D: Val: substr
D:Token at [8, 31]: left parenthese
D:Token at [8, 32]: identifier
D: Val: s2
D:Token at [8, 34]: comma
D:Token at [8, 36]: identifier
D: Val: s1len
D:Token at [8, 41]: comma
D:Token at [8, 43]: identifier
D: Val: s1len4
D:Token at [8, 49]: right parenthese
D:Token at [8, 51]: identifier
D: Val: s1len
D:Token at [8, 57]: assignment
D: Val: =
D:Token at [8, 59]: identifier
D: Val: s1len
D:Token at [8, 65]: add
D:Token at [8, 67]: integer literal
D: Val: 1
D:Token at [9, 2]: identifier
D: Val: write
D:Token at [9, 7]: left parenthese
D:Token at [9, 8]: string literal
D: Val: "4 znaky od"
D:Token at [9, 20]: comma
D:Token at [9, 22]: identifier
D: Val: s1len
D:Token at [9, 27]: comma
D:Token at [9, 29]: string literal
D: Val: ". znaku v \""
D:Token at [9, 43]: comma
D:Token at [9, 45]: identifier
D: Val: s2
D:Token at [9, 47]: comma
D:Token at [9, 49]: string literal
D: Val: "\":"
D:Token at [9, 54]: comma
D:Token at [9, 56]: identifier
D: Val: s1
D:Token at [9, 58]: comma
D:Token at [9, 60]: string literal
D: Val: "\n"
D:Token at [9, 64]: right parenthese
D:Token at [10, 2]: identifier
D: Val: write
D:Token at [10, 7]: left parenthese
D:Token at [10, 8]: string literal
D: Val: "Zadejte serazenou posloupnost vsech malych pismen a-h, "
D:Token at [10, 65]: right parenthese
D:Token at [11, 2]: identifier
D: Val: write
D:Token at [11, 7]: left parenthese
D:Token at [11, 8]: string literal
D: Val: "pricemz se pismena nesmeji v posloupnosti opakovat: "
D:Token at [11, 62]: right parenthese
D:Token at [12, 2]: identifier
D: Val: s1
D:Token at [12, 5]: assignment
D: Val: =
D:Token at [12, 7]: identifier
D: Val: reads
D:Token at [12, 12]: left parenthese
D:Token at [12, 13]: right parenthese
D:Token at [13, 2]: if
D:Token at [13, 5]: identifier
D: Val: s1
D:Token at [13, 8]: not equality
D:Token at [13, 9]: assignment
D: Val: =
D:Token at [13, 11]: nil
D:Token at [13, 15]: then
D:Token at [14, 3]: while
D:Token at [14, 9]: identifier
D: Val: s1
D:Token at [14, 12]: not equality
D:Token at [14, 13]: assignment
D: Val: =
D:Token at [14, 15]: string literal
D: Val: "abcdefgh"
D:Token at [14, 26]: do
D:Token at [15, 4]: identifier
D: Val: write
D:Token at [15, 9]: left parenthese
D:Token at [15, 10]: string literal
D: Val: "\n"
D:Token at [15, 14]: comma
D:Token at [15, 16]: string literal
D: Val: "Spatne zadana posloupnost, zkuste znovu:"
D:Token at [15, 58]: right parenthese
D:Token at [16, 4]: identifier
D: Val: s1
D:Token at [16, 7]: assignment
D: Val: =
D:Token at [16, 9]: identifier
D: Val: reads
D:Token at [16, 14]: left parenthese
D:Token at [16, 15]: right parenthese
D:Token at [17, 3]: end
D:Token at [18, 2]: else
D:Token at [19, 2]: end
D:Token at [20, 1]: end
D:Token at [22, 1]: identifier
D: Val: main
D:Token at [22, 5]: left parenthese
D:Token at [22, 6]: right parenthese
D:Token at [23, 0]: eof
