[32mDebug: [0mToken at [2, 1]: require
[32mDebug: [0mToken at [2, 9]: string literal
[32mDebug: [0mVal: "ifj21"
[32mDebug: [0mToken at [4, 1]: function
[32mDebug: [0mToken at [4, 10]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [4, 14]: left parenthese
[32mDebug: [0mToken at [4, 15]: right parenthese
[32mDebug: [0mToken at [5, 2]: local
[32mDebug: [0mToken at [5, 8]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [5, 11]: colon
[32mDebug: [0mToken at [5, 13]: string
[32mDebug: [0mToken at [5, 20]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [5, 22]: string literal
[32mDebug: [0mVal: "Toto je nejaky text"
[32mDebug: [0mToken at [6, 2]: local
[32mDebug: [0mToken at [6, 8]: identifier
[32mDebug: [0mVal: s2
[32mDebug: [0mToken at [6, 11]: colon
[32mDebug: [0mToken at [6, 13]: string
[32mDebug: [0mToken at [6, 20]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [6, 22]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [6, 25]: concatenate
[32mDebug: [0mVal: ..
[32mDebug: [0mToken at [6, 28]: string literal
[32mDebug: [0mVal: ", ktery jeste trochu obohatime"
[32mDebug: [0mToken at [7, 2]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [7, 7]: left parenthese
[32mDebug: [0mToken at [7, 8]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [7, 10]: comma
[32mDebug: [0mToken at [7, 12]: string literal
[32mDebug: [0mVal: "\010"
[32mDebug: [0mToken at [7, 18]: comma
[32mDebug: [0mToken at [7, 20]: identifier
[32mDebug: [0mVal: s2
[32mDebug: [0mToken at [7, 22]: right parenthese
[32mDebug: [0mToken at [7, 23]: local
[32mDebug: [0mToken at [7, 29]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [7, 34]: colon
[32mDebug: [0mToken at [7, 35]: integer
[32mDebug: [0mToken at [7, 42]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [7, 43]: length
[32mDebug: [0mToken at [7, 44]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [7, 47]: local
[32mDebug: [0mToken at [7, 53]: identifier
[32mDebug: [0mVal: s1len4
[32mDebug: [0mToken at [7, 59]: colon
[32mDebug: [0mToken at [7, 61]: integer
[32mDebug: [0mToken at [7, 68]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [7, 69]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 2]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 8]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [8, 10]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 16]: subtract
[32mDebug: [0mToken at [8, 18]: integer literal
[32mDebug: [0mVal: 4
[32mDebug: [0mToken at [8, 20]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [8, 23]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [8, 25]: identifier
[32mDebug: [0mVal: substr
[32mDebug: [0mToken at [8, 31]: left parenthese
[32mDebug: [0mToken at [8, 32]: identifier
[32mDebug: [0mVal: s2
[32mDebug: [0mToken at [8, 34]: comma
[32mDebug: [0mToken at [8, 36]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 41]: comma
[32mDebug: [0mToken at [8, 43]: identifier
[32mDebug: [0mVal: s1len4
[32mDebug: [0mToken at [8, 49]: right parenthese
[32mDebug: [0mToken at [8, 51]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 57]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [8, 59]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [8, 65]: add
[32mDebug: [0mToken at [8, 67]: integer literal
[32mDebug: [0mVal: 1
[32mDebug: [0mToken at [9, 2]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [9, 7]: left parenthese
[32mDebug: [0mToken at [9, 8]: string literal
[32mDebug: [0mVal: "4 znaky od"
[32mDebug: [0mToken at [9, 20]: comma
[32mDebug: [0mToken at [9, 22]: identifier
[32mDebug: [0mVal: s1len
[32mDebug: [0mToken at [9, 27]: comma
[32mDebug: [0mToken at [9, 29]: string literal
[32mDebug: [0mVal: ". znaku v \""
[32mDebug: [0mToken at [9, 43]: comma
[32mDebug: [0mToken at [9, 45]: identifier
[32mDebug: [0mVal: s2
[32mDebug: [0mToken at [9, 47]: comma
[32mDebug: [0mToken at [9, 49]: string literal
[32mDebug: [0mVal: "\":"
[32mDebug: [0mToken at [9, 54]: comma
[32mDebug: [0mToken at [9, 56]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [9, 58]: comma
[32mDebug: [0mToken at [9, 60]: string literal
[32mDebug: [0mVal: "\n"
[32mDebug: [0mToken at [9, 64]: right parenthese
[32mDebug: [0mToken at [10, 2]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [10, 7]: left parenthese
[32mDebug: [0mToken at [10, 8]: string literal
[32mDebug: [0mVal: "Zadejte serazenou posloupnost vsech malych pismen a-h, "
[32mDebug: [0mToken at [10, 65]: right parenthese
[32mDebug: [0mToken at [11, 2]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [11, 7]: left parenthese
[32mDebug: [0mToken at [11, 8]: string literal
[32mDebug: [0mVal: "pricemz se pismena nesmeji v posloupnosti opakovat: "
[32mDebug: [0mToken at [11, 62]: right parenthese
[32mDebug: [0mToken at [12, 2]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [12, 5]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [12, 7]: identifier
[32mDebug: [0mVal: reads
[32mDebug: [0mToken at [12, 12]: left parenthese
[32mDebug: [0mToken at [12, 13]: right parenthese
[32mDebug: [0mToken at [13, 2]: if
[32mDebug: [0mToken at [13, 5]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [13, 8]: not equality
[32mDebug: [0mToken at [13, 9]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [13, 11]: nil
[32mDebug: [0mToken at [13, 15]: then
[32mDebug: [0mToken at [14, 3]: while
[32mDebug: [0mToken at [14, 9]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [14, 12]: not equality
[32mDebug: [0mToken at [14, 13]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [14, 15]: string literal
[32mDebug: [0mVal: "abcdefgh"
[32mDebug: [0mToken at [14, 26]: do
[32mDebug: [0mToken at [15, 4]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [15, 9]: left parenthese
[32mDebug: [0mToken at [15, 10]: string literal
[32mDebug: [0mVal: "\n"
[32mDebug: [0mToken at [15, 14]: comma
[32mDebug: [0mToken at [15, 16]: string literal
[32mDebug: [0mVal: "Spatne zadana posloupnost, zkuste znovu:"
[32mDebug: [0mToken at [15, 58]: right parenthese
[32mDebug: [0mToken at [16, 4]: identifier
[32mDebug: [0mVal: s1
[32mDebug: [0mToken at [16, 7]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [16, 9]: identifier
[32mDebug: [0mVal: reads
[32mDebug: [0mToken at [16, 14]: left parenthese
[32mDebug: [0mToken at [16, 15]: right parenthese
[32mDebug: [0mToken at [17, 3]: end
[32mDebug: [0mToken at [18, 2]: else
[32mDebug: [0mToken at [19, 2]: end
[32mDebug: [0mToken at [20, 1]: end
[32mDebug: [0mToken at [22, 1]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [22, 5]: left parenthese
[32mDebug: [0mToken at [22, 6]: right parenthese
