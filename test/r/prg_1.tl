D:Token at [2, 1]: require
D:Token at [2, 9]: string literal
D: Val: ifj21
D:Token at [4, 1]: function
D:Token at [4, 10]: identifier
D: Val: main
D:Token at [4, 14]: left parenthese
D:Token at [4, 15]: right parenthese
D:Token at [5, 5]: local
D:Token at [5, 11]: identifier
D: Val: a
D:Token at [5, 13]: colon
D:Token at [5, 15]: integer
D:Token at [6, 5]: local
D:Token at [6, 11]: identifier
D: Val: vysl
D:Token at [6, 16]: colon
D:Token at [6, 18]: integer
D:Token at [6, 26]: assignment
D: Val: =
D:Token at [6, 28]: integer literal
D: Val: 0
D:Token at [7, 5]: identifier
D: Val: write
D:Token at [7, 10]: left parenthese
D:Token at [7, 11]: string literal
D: Val: Zadejte\032cislo\032pro\032vypocet\032faktorialu\010
D:Token at [7, 51]: right parenthese
D:Token at [8, 5]: identifier
D: Val: a
D:Token at [8, 7]: assignment
D: Val: =
D:Token at [8, 9]: identifier
D: Val: readi
D:Token at [8, 14]: left parenthese
D:Token at [8, 15]: right parenthese
D:Token at [10, 5]: if
D:Token at [10, 8]: identifier
D: Val: a
D:Token at [10, 10]: equality
D: Val: ==
D:Token at [10, 13]: nil
D:Token at [10, 17]: then
D:Token at [11, 9]: identifier
D: Val: write
D:Token at [11, 14]: left parenthese
D:Token at [11, 15]: string literal
D: Val: a\032je\032nil\010
D:Token at [11, 27]: right parenthese
D:Token at [11, 29]: return
D:Token at [12, 5]: else
D:Token at [13, 5]: end
D:Token at [15, 5]: if
D:Token at [15, 8]: identifier
D: Val: a
D:Token at [15, 10]: less then comparison
D: Val: <
D:Token at [15, 12]: integer literal
D: Val: 0
D:Token at [15, 14]: then
D:Token at [16, 9]: identifier
D: Val: write
D:Token at [16, 14]: left parenthese
D:Token at [16, 15]: string literal
D: Val: Faktorial\032nelze\032spocitat\010
D: Val: "Faktorial nelze spocitat\n"
D:Token at [16, 43]: right parenthese
D:Token at [17, 5]: else
D:Token at [18, 9]: identifier
D: Val: vysl
D:Token at [18, 14]: assignment
D: Val: =
D:Token at [18, 16]: integer literal
D: Val: 1
D:Token at [19, 9]: while
D:Token at [19, 15]: identifier
D: Val: a
D:Token at [19, 17]: greater then comparison
D: Val: >
D:Token at [19, 19]: integer literal
D: Val: 0
D:Token at [19, 21]: do
D:Token at [20, 13]: identifier
D: Val: vysl
D:Token at [20, 18]: assignment
D: Val: =
D:Token at [20, 20]: identifier
D: Val: vysl
D:Token at [20, 25]: multiply
D:Token at [20, 27]: identifier
D: Val: a
D:Token at [20, 29]: identifier
D: Val: a
D:Token at [20, 31]: assignment
D: Val: =
D:Token at [20, 33]: identifier
D: Val: a
D:Token at [20, 35]: subtract
D:Token at [20, 37]: integer literal
D: Val: 1
D:Token at [21, 9]: end
D:Token at [22, 9]: identifier
D: Val: write
D:Token at [22, 14]: left parenthese
D:Token at [22, 15]: string literal
D: Val: Vysledek\032je:\032
D:Token at [22, 30]: comma
D:Token at [22, 32]: identifier
D: Val: vysl
D:Token at [22, 36]: comma
D:Token at [22, 38]: string literal
D: Val: \010
D:Token at [22, 42]: right parenthese
D:Token at [23, 5]: end
D:Token at [24, 1]: end
D:Token at [26, 1]: identifier
D: Val: main
D:Token at [26, 5]: left parenthese
D:Token at [26, 6]: right parenthese
D:Token at [27, 0]: eof
