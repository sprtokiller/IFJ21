[32mDebug: [0mToken at [2, 1]: require
[32mDebug: [0mToken at [2, 9]: string literal
[32mDebug: [0mVal: "ifj21"
[32mDebug: [0mToken at [4, 1]: function
[32mDebug: [0mToken at [4, 10]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [4, 14]: left parenthese
[32mDebug: [0mToken at [4, 15]: right parenthese
[32mDebug: [0mToken at [5, 5]: local
[32mDebug: [0mToken at [5, 11]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [5, 13]: colon
[32mDebug: [0mToken at [5, 15]: integer
[32mDebug: [0mToken at [6, 5]: local
[32mDebug: [0mToken at [6, 11]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [6, 16]: colon
[32mDebug: [0mToken at [6, 18]: integer
[32mDebug: [0mToken at [6, 26]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [6, 28]: integer literal
[32mDebug: [0mVal: 0
[32mDebug: [0mToken at [7, 5]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [7, 10]: left parenthese
[32mDebug: [0mToken at [7, 11]: string literal
[32mDebug: [0mVal: "Zadejte cislo pro vypocet faktorialu\n"
[32mDebug: [0mToken at [7, 51]: right parenthese
[32mDebug: [0mToken at [8, 5]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [8, 7]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [8, 9]: identifier
[32mDebug: [0mVal: readi
[32mDebug: [0mToken at [8, 14]: left parenthese
[32mDebug: [0mToken at [8, 15]: right parenthese
[32mDebug: [0mToken at [10, 5]: if
[32mDebug: [0mToken at [10, 8]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [10, 10]: equality
[32mDebug: [0mVal: ==
[32mDebug: [0mToken at [10, 13]: nil
[32mDebug: [0mToken at [10, 17]: then
[32mDebug: [0mToken at [11, 9]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [11, 14]: left parenthese
[32mDebug: [0mToken at [11, 15]: string literal
[32mDebug: [0mVal: "a je nil\n"
[32mDebug: [0mToken at [11, 27]: right parenthese
[32mDebug: [0mToken at [11, 29]: return
[32mDebug: [0mToken at [12, 5]: else
[32mDebug: [0mToken at [13, 5]: end
[32mDebug: [0mToken at [15, 5]: if
[32mDebug: [0mToken at [15, 8]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [15, 10]: less then comparison
[32mDebug: [0mVal: <
[32mDebug: [0mToken at [15, 12]: integer literal
[32mDebug: [0mVal: 0
[32mDebug: [0mToken at [15, 14]: then
[32mDebug: [0mToken at [16, 9]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [16, 14]: left parenthese
[32mDebug: [0mToken at [16, 15]: string literal
[32mDebug: [0mVal: "Faktorial nelze spocitat\n"
[32mDebug: [0mToken at [16, 43]: right parenthese
[32mDebug: [0mToken at [17, 5]: else
[32mDebug: [0mToken at [18, 9]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [18, 14]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [18, 16]: integer literal
[32mDebug: [0mVal: 1
[32mDebug: [0mToken at [19, 9]: while
[32mDebug: [0mToken at [19, 15]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [19, 17]: greater then comparison
[32mDebug: [0mVal: >
[32mDebug: [0mToken at [19, 19]: integer literal
[32mDebug: [0mVal: 0
[32mDebug: [0mToken at [19, 21]: do
[32mDebug: [0mToken at [20, 13]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [20, 18]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [20, 20]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [20, 25]: multiply
[32mDebug: [0mToken at [20, 27]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [20, 29]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [20, 31]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [20, 33]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [20, 35]: integer literal
[32mDebug: [0mVal: -1
[32mDebug: [0mToken at [21, 9]: end
[32mDebug: [0mToken at [22, 9]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [22, 14]: left parenthese
[32mDebug: [0mToken at [22, 15]: string literal
[32mDebug: [0mVal: "Vysledek je: "
[32mDebug: [0mToken at [22, 30]: comma
[32mDebug: [0mToken at [22, 32]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [22, 36]: comma
[32mDebug: [0mToken at [22, 38]: string literal
[32mDebug: [0mVal: "\n"
[32mDebug: [0mToken at [22, 42]: right parenthese
[32mDebug: [0mToken at [23, 5]: end
[32mDebug: [0mToken at [24, 1]: end
[32mDebug: [0mToken at [26, 1]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [26, 5]: left parenthese
[32mDebug: [0mToken at [26, 6]: right parenthese
