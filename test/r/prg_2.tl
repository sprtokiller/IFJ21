[32mDebug: [0mToken at [2, 1]: require
[32mDebug: [0mToken at [2, 9]: string literal
[32mDebug: [0mVal: "ifj21"
[32mDebug: [0mToken at [4, 1]: function
[32mDebug: [0mToken at [4, 10]: identifier
[32mDebug: [0mVal: factorial
[32mDebug: [0mToken at [4, 19]: left parenthese
[32mDebug: [0mToken at [4, 20]: identifier
[32mDebug: [0mVal: n
[32mDebug: [0mToken at [4, 22]: colon
[32mDebug: [0mToken at [4, 24]: integer
[32mDebug: [0mToken at [4, 31]: right parenthese
[32mDebug: [0mToken at [4, 33]: colon
[32mDebug: [0mToken at [4, 35]: integer
[32mDebug: [0mToken at [5, 2]: local
[32mDebug: [0mToken at [5, 8]: identifier
[32mDebug: [0mVal: n1
[32mDebug: [0mToken at [5, 11]: colon
[32mDebug: [0mToken at [5, 13]: integer
[32mDebug: [0mToken at [5, 21]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [5, 23]: identifier
[32mDebug: [0mVal: n
[32mDebug: [0mToken at [5, 25]: integer literal
[32mDebug: [0mVal: -1
[32mDebug: [0mToken at [6, 2]: if
[32mDebug: [0mToken at [6, 5]: identifier
[32mDebug: [0mVal: n
[32mDebug: [0mToken at [6, 7]: less then comparison
[32mDebug: [0mVal: <
[32mDebug: [0mToken at [6, 9]: integer literal
[32mDebug: [0mVal: 2
[32mDebug: [0mToken at [6, 11]: then
[32mDebug: [0mToken at [7, 3]: return
[32mDebug: [0mToken at [7, 10]: integer literal
[32mDebug: [0mVal: 1
[32mDebug: [0mToken at [8, 2]: else
[32mDebug: [0mToken at [9, 3]: local
[32mDebug: [0mToken at [9, 9]: identifier
[32mDebug: [0mVal: tmp
[32mDebug: [0mToken at [9, 13]: colon
[32mDebug: [0mToken at [9, 15]: integer
[32mDebug: [0mToken at [9, 23]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [9, 25]: identifier
[32mDebug: [0mVal: factorial
[32mDebug: [0mToken at [9, 34]: left parenthese
[32mDebug: [0mToken at [9, 35]: identifier
[32mDebug: [0mVal: n1
[32mDebug: [0mToken at [9, 37]: right parenthese
[32mDebug: [0mToken at [10, 3]: return
[32mDebug: [0mToken at [10, 10]: identifier
[32mDebug: [0mVal: n
[32mDebug: [0mToken at [10, 12]: multiply
[32mDebug: [0mToken at [10, 14]: identifier
[32mDebug: [0mVal: tmp
[32mDebug: [0mToken at [11, 2]: end
[32mDebug: [0mToken at [12, 1]: end
[32mDebug: [0mToken at [14, 1]: function
[32mDebug: [0mToken at [14, 10]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [14, 14]: left parenthese
[32mDebug: [0mToken at [14, 15]: right parenthese
[32mDebug: [0mToken at [15, 2]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [15, 7]: left parenthese
[32mDebug: [0mToken at [15, 8]: string literal
[32mDebug: [0mVal: "Zadejte cislo pro vypocet faktorialu: "
[32mDebug: [0mToken at [15, 48]: right parenthese
[32mDebug: [0mToken at [16, 2]: local
[32mDebug: [0mToken at [16, 8]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [16, 10]: colon
[32mDebug: [0mToken at [16, 12]: integer
[32mDebug: [0mToken at [16, 20]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [16, 22]: identifier
[32mDebug: [0mVal: readi
[32mDebug: [0mToken at [16, 27]: left parenthese
[32mDebug: [0mToken at [16, 28]: right parenthese
[32mDebug: [0mToken at [17, 2]: if
[32mDebug: [0mToken at [17, 5]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [17, 7]: not equality
[32mDebug: [0mToken at [17, 8]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [17, 10]: nil
[32mDebug: [0mToken at [17, 14]: then
[32mDebug: [0mToken at [18, 3]: if
[32mDebug: [0mToken at [18, 6]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [18, 8]: less then comparison
[32mDebug: [0mVal: <
[32mDebug: [0mToken at [18, 10]: integer literal
[32mDebug: [0mVal: 0
[32mDebug: [0mToken at [18, 12]: then
[32mDebug: [0mToken at [19, 4]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [19, 9]: left parenthese
[32mDebug: [0mToken at [19, 10]: string literal
[32mDebug: [0mVal: "Faktorial nejde spocitat!"
[32mDebug: [0mToken at [19, 37]: comma
[32mDebug: [0mToken at [19, 39]: string literal
[32mDebug: [0mVal: "\n"
[32mDebug: [0mToken at [19, 43]: right parenthese
[32mDebug: [0mToken at [20, 3]: else
[32mDebug: [0mToken at [21, 4]: local
[32mDebug: [0mToken at [21, 10]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [21, 15]: colon
[32mDebug: [0mToken at [21, 17]: integer
[32mDebug: [0mToken at [21, 25]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [21, 27]: identifier
[32mDebug: [0mVal: factorial
[32mDebug: [0mToken at [21, 36]: left parenthese
[32mDebug: [0mToken at [21, 37]: identifier
[32mDebug: [0mVal: a
[32mDebug: [0mToken at [21, 38]: right parenthese
[32mDebug: [0mToken at [22, 4]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [22, 9]: left parenthese
[32mDebug: [0mToken at [22, 10]: string literal
[32mDebug: [0mVal: "Vysledek je "
[32mDebug: [0mToken at [22, 24]: comma
[32mDebug: [0mToken at [22, 26]: identifier
[32mDebug: [0mVal: vysl
[32mDebug: [0mToken at [22, 30]: comma
[32mDebug: [0mToken at [22, 32]: string literal
[32mDebug: [0mVal: "\n"
[32mDebug: [0mToken at [22, 36]: right parenthese
[32mDebug: [0mToken at [23, 3]: end
[32mDebug: [0mToken at [24, 2]: else
[32mDebug: [0mToken at [25, 3]: identifier
[32mDebug: [0mVal: write
[32mDebug: [0mToken at [25, 8]: left parenthese
[32mDebug: [0mToken at [25, 9]: string literal
[32mDebug: [0mVal: "Chyba pri nacitani celeho cisla!\n"
[32mDebug: [0mToken at [25, 45]: right parenthese
[32mDebug: [0mToken at [26, 2]: end
[32mDebug: [0mToken at [27, 1]: end
[32mDebug: [0mToken at [29, 1]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [29, 5]: left parenthese
[32mDebug: [0mToken at [29, 6]: right parenthese
