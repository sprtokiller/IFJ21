[32mDebug: [0mToken at [3, 1]: u_minus
[32mDebug: [0mToken at [4, 1]: u_plus
[32mDebug: [0mToken at [5, 1]: string literal
[32mDebug: [0mVal: "string"
[32mDebug: [0mToken at [6, 1]: less then comparison
[32mDebug: [0mVal: <
[32mDebug: [0mToken at [7, 1]: greater then comparison
[32mDebug: [0mVal: >
[32mDebug: [0mToken at [8, 1]: multiply
[32mDebug: [0mToken at [9, 1]: divide
[32mDebug: [0mVal: /
[32mDebug: [0mToken at [10, 1]: integer divide
[32mDebug: [0mVal: //
[32mDebug: [0mToken at [11, 1]: not equality
[32mDebug: [0mToken at [12, 1]: length
[32mDebug: [0mToken at [13, 1]: concatenate
[32mDebug: [0mVal: ..
[32mDebug: [0mToken at [14, 1]: less then comparison
[32mDebug: [0mVal: <
[32mDebug: [0mToken at [15, 1]: less or equal then comparison
[32mDebug: [0mVal: <=
[32mDebug: [0mToken at [16, 1]: greater then comparison
[32mDebug: [0mVal: >
[32mDebug: [0mToken at [17, 1]: greater or equal then comparison
[32mDebug: [0mVal: >=
[32mDebug: [0mToken at [18, 1]: equality
[32mDebug: [0mVal: ==
[32mDebug: [0mToken at [19, 1]: not equality
[32mDebug: [0mToken at [19, 2]: assignment
[32mDebug: [0mVal: =
[32mDebug: [0mToken at [21, 1]: string literal
[32mDebug: [0mVal: "Ahoj\n\"Sve'te \\\034"
[32mDebug: [0mToken at [23, 1]: function
[32mDebug: [0mToken at [23, 10]: identifier
[32mDebug: [0mVal: reads
[32mDebug: [0mToken at [23, 15]: left parenthese
[32mDebug: [0mToken at [23, 16]: right parenthese
[32mDebug: [0mToken at [23, 18]: colon
[32mDebug: [0mToken at [23, 20]: string
[32mDebug: [0mToken at [24, 1]: function
[32mDebug: [0mToken at [24, 10]: identifier
[32mDebug: [0mVal: readi
[32mDebug: [0mToken at [24, 15]: left parenthese
[32mDebug: [0mToken at [24, 16]: right parenthese
[32mDebug: [0mToken at [24, 18]: colon
[32mDebug: [0mToken at [24, 20]: integer
[32mDebug: [0mToken at [25, 1]: function
[32mDebug: [0mToken at [25, 10]: identifier
[32mDebug: [0mVal: readn
[32mDebug: [0mToken at [25, 15]: left parenthese
[32mDebug: [0mToken at [25, 16]: right parenthese
[32mDebug: [0mToken at [25, 18]: colon
[32mDebug: [0mToken at [25, 20]: number
[32mDebug: [0mToken at [27, 1]: function
[32mDebug: [0mToken at [27, 10]: identifier
[32mDebug: [0mVal: main
[32mDebug: [0mToken at [27, 14]: left parenthese
[32mDebug: [0mToken at [27, 15]: right parenthese
[32mDebug: [0mToken at [36, 1]: identifier
[32mDebug: [0mVal: id_a
[32mDebug: [0mToken at [37, 1]: double literal
[32mDebug: [0mVal: 12.120000000
[32mDebug: [0mToken at [39, 1]: logical and
[32mDebug: [0mToken at [40, 1]: boolean
[32mDebug: [0mToken at [41, 1]: do
[32mDebug: [0mToken at [42, 1]: end
[32mDebug: [0mToken at [43, 1]: else
[32mDebug: [0mToken at [44, 1]: elseif
[32mDebug: [0mToken at [45, 1]: false
[32mDebug: [0mToken at [46, 1]: function
[32mDebug: [0mToken at [47, 1]: integer
[32mDebug: [0mToken at [48, 1]: if
[32mDebug: [0mToken at [49, 1]: nil
[32mDebug: [0mToken at [50, 1]: logical not
[32mDebug: [0mToken at [51, 1]: number
[32mDebug: [0mToken at [52, 1]: logical or
[32mDebug: [0mToken at [53, 1]: string
[32mDebug: [0mToken at [54, 1]: require
[32mDebug: [0mToken at [55, 1]: return
[32mDebug: [0mToken at [56, 1]: then
[32mDebug: [0mToken at [57, 1]: true
[32mDebug: [0mToken at [58, 1]: while
