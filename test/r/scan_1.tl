D:Token at [3, 1]: u_minus
D:Token at [4, 1]: u_plus
D:Token at [5, 1]: less then comparison
D: Val: <
D:Token at [6, 1]: greater then comparison
D: Val: >
D:Token at [7, 1]: multiply
D:Token at [8, 1]: divide
D: Val: /
D:Token at [9, 1]: integer divide
D: Val: //
D:Token at [10, 1]: modulo
D:Token at [11, 1]: power
D:Token at [12, 1]: not equality
D:Token at [13, 1]: length
D:Token at [14, 1]: string literal
D: Val: string
D:Token at [15, 1]: semicolon
D:Token at [16, 1]: colon
D:Token at [17, 1]: comma
D:Token at [18, 1]: concatenate
D: Val: ..
D:Token at [19, 1]: less then comparison
D: Val: <
D:Token at [20, 1]: equality
D: Val: <=
D:Token at [21, 1]: greater then comparison
D: Val: >
D:Token at [22, 1]: equality
D: Val: >=
D:Token at [23, 1]: equality
D: Val: ==
D:Token at [24, 1]: not equality
D:Token at [24, 2]: assignment
D: Val: =
D:Token at [26, 1]: string literal
D: Val: Ahoj\032svï¿½te
D:Token at [27, 1]: string literal
D: Val: 
D:Token at [28, 1]: string literal
D: Val: \010\032\009\032\034\032\092
D:Token at [29, 1]: string literal
D: Val: \110
D:Token at [30, 1]: string literal
D: Val: Ahoj\010\034Sve'te\032\092\034
D:Token at [32, 1]: function
D:Token at [32, 10]: identifier
D: Val: reads
D:Token at [32, 15]: left parenthese
D:Token at [32, 16]: right parenthese
D:Token at [32, 18]: colon
D:Token at [32, 20]: string
D:Token at [33, 1]: function
D:Token at [33, 10]: identifier
D: Val: readi
D:Token at [33, 15]: left parenthese
D:Token at [33, 16]: right parenthese
D:Token at [33, 18]: colon
D:Token at [33, 20]: integer
D:Token at [34, 1]: function
D:Token at [34, 10]: identifier
D: Val: readn
D:Token at [34, 15]: left parenthese
D:Token at [34, 16]: right parenthese
D:Token at [34, 18]: colon
D:Token at [34, 20]: number
D:Token at [36, 1]: function
D:Token at [36, 10]: identifier
D: Val: main
D:Token at [36, 14]: left parenthese
D:Token at [36, 15]: right parenthese
D:Token at [45, 1]: identifier
D: Val: id_a
D:Token at [46, 1]: double literal
D: Val: 12.120000000
D:Token at [47, 1]: double literal
D: Val: 1000.000000000
D:Token at [48, 1]: double literal
D: Val: 0.001000000
D:Token at [49, 1]: double literal
D: Val: 1000.000000000
D:Token at [50, 1]: double literal
D: Val: 1300.000000000
D:Token at [52, 1]: logical and
D:Token at [53, 1]: boolean
D:Token at [54, 1]: do
D:Token at [55, 1]: end
D:Token at [56, 1]: else
D:Token at [57, 1]: elseif
D:Token at [58, 1]: false
D:Token at [59, 1]: function
D:Token at [60, 1]: integer
D:Token at [61, 1]: if
D:Token at [62, 1]: nil
D:Token at [63, 1]: logical not
D:Token at [64, 1]: number
D:Token at [65, 1]: logical or
D:Token at [66, 1]: string
D:Token at [67, 1]: require
D:Token at [68, 1]: return
D:Token at [69, 1]: then
D:Token at [70, 1]: true
D:Token at [71, 1]: while
D:Token at [71, 5]: eof
