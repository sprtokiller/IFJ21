%token             IDENTIFIER TYPE EXPRESSION STRLIT
%%

Program:              "require" STRLIT Chunk;

Chunk:                /* eps */ | FuncDecl Chunk | GlobalDecl Chunk | IDENTIFIER FuncBlock Chunk;


FuncDecl:             "function" IDENTIFIER "(" OptParamList ")" OptResult Block "end";
OptParamList:         /* eps */ | FirstParam OtherParams;
FirstParam:           IDENTIFIER ":" TYPE;
OtherParams:          /* eps */ | "," FirstParam OtherParams;

GlobalDecl:           "global" IDENTIFIER ":" UnknownDeclThing;

UnknownDeclThing:     "function" "(" OptTypeList ")" OptResult | TYPE OptEqStmt;

OptTypeList:          /* eps */ | TYPE OptMoreTypes;
OptMoreTypes:         /* eps */ | "," TYPE OptMoreTypes;

OptEqStmt:            /* eps */ | "=" EXPRESSION;
OptResult:            /* eps */ | ":" TYPE OptMoreTypes;


Block:                /* eps */ | FuncOrAss Block | LocalDecl Block | IfBlock Block | WhileBlock Block | ReturnBlock Block | ForBlock Block | RepBlock Block;


FuncOrAss:            IDENTIFIER FuncOrAssSel;
FuncOrAssSel:         FuncBlock | AssBlock;
FuncBlock:            "(" FuncSel;
FuncSel:              ")" | EXPRESSION OptExprList ")";
AssBlock:             OptIdList "=" EXPRESSION OptExprList;


OptIdList:            /* eps */ | "," IDENTIFIER OptIdList;
OptExprList:          /* eps */ | "," EXPRESSION OptExprList;

LocalDecl:            "local" IDENTIFIER ":" UnknownDeclThing;

IfBlock:              "if" EXPRESSION "then" Block OptElsifsBlocks OptElseBlock "end";
OptElseBlock:         /* eps */ | "else" Block;
OptElsifsBlocks:      /* eps */ | "elsif" EXPRESSION "then" Block OptElsifsBlocks;
WhileBlock:           "while" EXPRESSION "do" Block "end";
ReturnBlock:          "return" OptExpression;

ForBlock:             "for" IDENTIFIER "=" EXPRESSION "," EXPRESSION OptInc "do" Block "end";
OptInc:               /* eps */ | "," EXPRESSION;
RepBlock:             "repeat" Block "until" EXPRESSION;
OptExpression:		  /* eps */| EXPRESSION OptExprList;